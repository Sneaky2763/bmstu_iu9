(define-syntax trace 
  (syntax-rules ()
    ((trace xs)
     (let ((val xs))
       (write 'xs)
       (display " => ")
       (write val)
       (display #\newline)
       val)
     )
    )
  )

(define (zip . xss)
  (if (or (null? xss)
          (null? (trace (car xss))))
      '()
      (cons (map car xss)
            (apply zip (map cdr (trace xss))))))


;;номер 2
(define (signum x)
  (cond
    ((< x 0) -1)
    ((= x 0)  1) ; Ошибка здесь!
    (else     1)))

(define-syntax test
  (syntax-rules ()
    ((test exp res)
     '(exp res))))

(define (run-test test)
  (write (car test))
  (let ((res (eval (car test) (interaction-environment))))
    (if (equal? res (cadr test))
        (begin (display " ok")
               (display "\n")
               #t)
        (begin (display " FAIL\n")
               (display "   Expected: ")
               (write (cadr test))
               (display "\n   Returned: ")
               (write res)
               (display "\n")
               #f)
        )
    )
  )

(define (run-tests tests)
  (let ((res #t))
    (define (rec-tests tests res)
      (if (null? tests)
          res
          (begin
            (if (not (run-test (car tests)))
                (set! res #f))
            (rec-tests (cdr tests) res))
          )
      )
    (rec-tests tests res))
  )
  

(define the-tests
  (list (test (signum -2) -1)
        (test (signum  0)  0)
        (test (signum  2)  1)
        )
  )

(run-tests the-tests)

;;доп. тесты
(define counter
  (let ((n 0))
    (lambda ()
      (set! n (+ n 1))
      n)))

(+ (trace (counter))
   (trace (counter)))

(define counter-tests
  (list (test (counter) 3)
        (test (counter) 77) ; ошибка
        (test (counter) 5)))

(run-tests counter-tests)

;;номер 3
(define (reverse! . data)
  (if (null? (cdr data))
      (begin (cond ((list? (car data)) (reverse-list! (car data) (reverse (car data))))
                   ((string? (car data)) (reverse-string! (car data)))
                   ((vector? (car data)) (reverse-vector! (car data)))
                   )
             )
      (let((start (car data)))
        (define pr (cadr data))
        (begin
          (if(list? pr)
             (let*((res (reverse (type->list start))))
               (define (revlist xs revxs)
                 (if (null? revxs)
                     '()
                     (begin
                       (set-car! xs (car revxs))
                       (revlist (cdr xs) (cdr revxs)))
                     )
                 )
               (revlist pr res)
               )
             (let loop ((i 0))
               (define len (type-length start))
               (if (< i len)
                   (let*()
                     (type-set! pr i (type-ref start (- len i 1)))
                     (loop (+ i 1))))
               )
             )
          )
        )
      )
  )

(define (type-length xs)
  (cond ((list? xs) (length xs))
        ((string? xs) (string-length xs)) 
        ((vector? xs) (vector-length xs)))
  )
(define (type-set! xs index rep)
  (cond ((list? xs) (list-set! xs index rep))
        ((string? xs) (string-set! xs index rep))
        ((vector? xs) (vector-set! xs index rep)))
  )
(define (type-ref xs index)
  (cond ((list? xs) (list-ref xs index))
        ((string? xs) (string-ref xs index))
        ((vector? xs) (vector-ref xs index)))
  )
(define (type->list xs)
  (cond ((string? xs) (string->list xs))
        ((vector? xs) (vector->list xs)))
  )
  
(define (reverse-list! list rev-list)
  (if (not (null? rev-list))
      (begin
        (set-car! list (car rev-list))
        (reverse-list! (cdr list) (cdr rev-list)))
      )
  )

(define (reverse-string! str)
  (let ((len (string-length str)))
    (let loop ((i 0))
      (if (< i (/ len 2))
          (let* ((j (- len i 1))
                 (char-i (string-ref str i))
                 (char-j (string-ref str j)))
            (string-set! str i char-j)
            (string-set! str j char-i)
            (loop (+ i 1))) 
          ))))

(define (reverse-vector! vec)
  (let ((len (vector-length vec)))
    (let loop ((i 0))
      (if (< i (/ len 2))
          (let* ((j (- len i 1))
                 (el-i (vector-ref vec i))
                 (el-j (vector-ref vec j)))
            (vector-set! vec i el-j)
            (vector-set! vec j el-i)
            (loop (+ i 1))) 
          ))))

(define xs '(a b c d e))
(define ys (vector 1 2 3 4 5))
(define zs (string #\h #\e #\l #\l #\o))

(define the-tests
  (list (test (let((xs '(a b c d e)))
                (reverse! xs) xs)  (e d c b a))
        (test (let ((ys (vector 1 2 3 4 5)))
                (reverse! ys) ys) #(5 4 3 2 1))
        (test (let ((zs (string #\h #\e #\l #\l #\o)))
                (reverse! zs) zs) "olleh")
        (test (let ((xs (list 'a 'b 'c 'd 'e)) (ys (vector 1 2 3 4 5)))
                (reverse! xs ys) (list xs ys)) ((a b c d e) #(e d c b a)))
        (test (let ((xs (list 'a 'b 'c 'd 'e)) (zs (string #\h #\e #\l #\l #\o)))
                (reverse! zs xs) (list zs xs)) ("hello" (#\o #\l #\l #\e #\h)))
        )
  )
(run-tests the-tests)
;;номер 4
(define (factorize exp)
  (cond ((equal? (list-ref (cadr exp) 2) 2)
         `(* (- ,(list-ref (cadr exp) 1) ,(list-ref (caddr exp) 1))
             (+ ,(list-ref (cadr exp) 1) ,(list-ref (caddr exp) 1))))
        
        ((and (equal? (list-ref (cadr exp) 2) 3) (equal? (car exp) '-))
         `(* (- ,(list-ref (cadr exp) 1) ,(list-ref (caddr exp) 1)) 
             (+ (expt ,(list-ref (cadr exp) 1) 2) 
                (* ,(list-ref (cadr exp) 1) ,(list-ref (caddr exp) 1)) 
                (expt ,(list-ref (caddr exp) 1) 2))))
        
        ((and (equal? (list-ref (cadr exp) 2) 3) (equal? (car exp) '+))
         `(* (+ ,(list-ref (cadr exp) 1) ,(list-ref (caddr exp) 1)) 
             (+ (- (expt ,(list-ref (cadr exp) 1) 2) 
                   (* ,(list-ref (cadr exp) 1) ,(list-ref (caddr exp) 1))) 
                (expt ,(list-ref (caddr exp) 1) 2)))))
  )

(define the-tests
  (list (test (factorize '(- (expt x 2) (expt y 2)))
              (* (- x y) (+ x y)))
        (test (factorize  '(- (expt x 3) (expt y 3)))
              (* (- x y) (+ (expt x 2) (* x y) (expt y 2))))
        (test (factorize  '(+ (expt x 3) (expt y 3)))
              (* (+ x y) (+ (- (expt x 2) (* x y)) (expt y 2))))
        (test (factorize '(- (expt (+ first 1) 2) (expt (- second 1) 2)))
              (* (- (+ first 1) (- second 1))
                 (+ (+ first 1) (- second 1))))
        (test (eval (list (list 'lambda
                                '(x y)
                                (factorize '(- (expt x 2) (expt y 2))))
                          1 2)
                    (interaction-environment))
              -3)
        )
  )
(run-tests the-tests)