(define (my-gcd a b)
  (if (and (> (abs a) 0) (> (abs b) 0))
      (if (> a b)
          (my-gcd (remainder (abs a) (abs b)) (abs b))
          (my-gcd (remainder (abs b) (abs a)) (abs a)))
      (max a b))
  )

(define (my-lcm a b)
  (/ (* a b) (my-gcd a b)))

(define (prime? n)
  (let ((i 2))
    (define (loop i n)
      (or (not (<= (* i i) n))
          (and (> (remainder n i) 0)
               (loop (+ i 1) n)
               )
          )
      )
    (loop i n)
    )
  )
  