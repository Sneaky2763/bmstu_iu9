(define (my-range a b d) ;;O((b-a)/d)
  (if (>= a b)
      '()
      (cons a (my-range (+ a d) b d))
      )
  )

(define (my-flatten xs) ;;O(|xs|)
  (if (null? xs)
      '()
      (if (list? (car xs))
          (append (my-flatten (car xs)) (my-flatten (cdr xs)))
          (cons (car xs) (my-flatten (cdr xs)))
          )
      )
  )

(define (my-element? x xs) ;;O(|xs|)
  (and (not (null? xs))
       (or (equal? x (car xs))
           (my-element? x (cdr xs)))
       )
  )

(define (my-filter pred? xs) ;;O(|xs|)
  (if (null? xs)
      '()
      (if (pred? (car xs))
          (cons (car xs) (my-filter pred? (cdr xs)))
          (my-filter pred? (cdr xs))
          )
      )
  )

(define (my-fold-left op xs) ;;O(|xs|)
  (if (null? (cdr xs))
      (car xs)
      (my-fold-left op (cons (op (car xs) (cadr xs)) (cddr xs)))
      )
  )

(define (my-fold-right op xs) ;;O(|xs|)
  (if (null? (cdr xs))
      (car xs)
      (op (car xs) (my-fold-right op (cdr xs)))
      )
  )

(define (reverse! xs) ;;O(|xs|)
  (define (reverse-list! xs rev-xs)
    (if (not (null? rev-xs))
        (begin
          (set-car! xs (car rev-xs))
          (reverse-list! (cdr xs) (cdr rev-xs)))
        )
    )
  (begin (reverse-list! xs (reverse xs))
         xs
         )
  )


(define (append! . xs) ;;O(|xs|)
  (define (append-helper l1 l2)
    (if (null? l1)
        l2
        (begin (set-cdr! l1 (append-helper (cdr l1) l2))
               l1)
        )
    )
  (if (null? xs)
      '()
      (let loop ((first (car xs))
                 (rest (cdr xs)))
        (if (null? rest)
            first
            (append-helper first (loop (car rest) (cdr rest))))
        )
      )
  )