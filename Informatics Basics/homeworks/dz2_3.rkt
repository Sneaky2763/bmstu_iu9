(define (string-trim-left str) ;O(кол-ва whitespace'ов слева)
  (let ((lst (string->list str)))
    (define (rec-trimmer-left lst)
      (if (char-whitespace? (car lst))
          (rec-trimmer-left (cdr lst))
          (list->string lst)
          )
      )
    (rec-trimmer-left lst)
    )
  )

(define (string-trim-right str) ;O(length(str) + кол-ва whitespace'ов справа)
  (let ((lst (reverse (string->list str))))
    (define (rec-trimmer-right lst)
      (if (char-whitespace? (car lst))
          (rec-trimmer-right (cdr lst))
          (list->string (reverse lst))
          )
      )
    (rec-trimmer-right lst)
    )
  )

(define (string-trim str) ;O(length(str) + кол-ва whitespace'ов с обеих сторон)
  (let ((lstr (string-trim-left str)))
    (string-trim-right lstr)
    )
  )

(define (string-prefix? a b) ;O(min (length(str1), length(str2)))
  (let ((str1 (string->list a))
        (str2 (string->list b)))
    (define (prefix-rec str1 str2)
      (or (null? str1)
          (and (not (null? str2))
               (equal? (car str1) (car str2))
               (prefix-rec (cdr str1) (cdr str2))
               )
          )
      )
    (prefix-rec str1 str2)
    )
  )

(define (string-suffix? a b) ;O(length(str1) + length(str2))
  (let ((str1 (reverse (string->list a)))
        (str2 (reverse (string->list b))))
    (define (suffix-rec str1 str2)
      (or (null? str1)
          (and (not (null? str2))
               (equal? (car str1) (car str2))
               (suffix-rec (cdr str1) (cdr str2))
               )
          )
      )
    (suffix-rec str1 str2)
    )
  )

(define (string-infix? str1 str2) ;O(length(str2)^2)
  (or (equal? str1 str2)
      (and (not (null? (string->list str2)))
           (or (string-prefix? str1 str2)
               (string-infix? str1 (list->string (cdr (string->list str2)))))
           )
      )
  )

;O(length(str)^3 из-за хвостовой рекурсии, string-suffix? и append/length)
(define (string-split str sep)
  (let  ((lstr (string->list str)))
    (define (split-rec lstr sep cur res)
      (if (not (null? lstr))
          (if (string-suffix? sep (list->string cur))
              (split-rec lstr sep '()
                         (append res (list (substring
                         (list->string cur) 0
                         (- (length cur) (length (string->list sep)))))))
              (split-rec (cdr lstr) sep (append cur (list (car lstr))) res)
              )
          (append res (list (list->string cur)))
          )
      )
    (split-rec lstr sep '() '())
    )
  )
