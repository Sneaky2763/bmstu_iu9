(define (list->set xs) ;;O(|xs^2|)
  (define (remove-duplicates xs seen)
    (cond ((null? xs) seen)
          ((member (car xs) seen) 
           (remove-duplicates (cdr xs) seen))
          (else 
           (remove-duplicates (cdr xs) (cons (car xs) seen)))
          )
    )
  (remove-duplicates xs '())
  )

(define (set? xs) ;;O(|xs^2|)
  (equal? (length xs) (length (list->set xs)))
  )

(define (union xs ys) ;;O(|xs+ys|^2)
  (list->set (append xs ys))
  )

(define (intersection xs ys) ;;O(|xs|^2)
  (if (null? xs)
      '()
      (if (member (car xs) ys)
          (cons (car xs) (intersection (cdr xs) ys))
          (intersection (cdr xs) ys)
          )
      )
  )

(define (difference xs ys) ;;O(|xs|^2)
  (if (null? xs)
      '()
      (if (member (car xs) ys)
          (difference (cdr xs) ys)
          (cons (car xs) (difference (cdr xs) ys))
          )
      )
  )

(define (symmetric-difference xs ys) ;;O(|max(xs, ys)|^2)
  (union (difference xs ys) (difference ys xs))
  )

(define (set-eq? xs ys) ;;O(|max(xs, ys)|^2)
  (null? (symmetric-difference xs ys))
  )
